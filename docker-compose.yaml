version: '3'
services:
  postgres-core:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_CORE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CORE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_CORE_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_CORE_USER} -d $${POSTGRES_CORE_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres-synchronizer:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_SYNCHRONIZER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SYNCHRONIZER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SYNCHRONIZER_DB}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_SYNCHRONIZER_USER} -d $${POSTGRES_SYNCHRONIZER_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_synchronizer_data:/var/lib/postgresql/data
    networks:
      - app-network

  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app-network
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9094"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://host.docker.internal:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9094:9094"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network

  kafdrop:
    image: obsidiandynamics/kafdrop:3.31.0
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
      JVM_OPTS: -Xms32M -Xmx64M
    ports:
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  statify-core:
    build: ./statify-core
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: ${POSTGRES_CORE_DOCKER_URL}
      POSTGRES_USER: ${POSTGRES_CORE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CORE_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS_DOCKER}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SERVER_PORT: ${STATIFY_CORE_PORT}
      SERVER_URL: ${STATIFY_CORE_URL}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT}
    depends_on:
      postgres-core:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:$${STATIFY_CORE_PORT}/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  statify-synchronizer:
    build: ./statify-synchronizer
    environment:
      SPRING_DATASOURCE_URL: ${POSTGRES_SYNCHRONIZER_DOCKER_URL}
      POSTGRES_USER: ${POSTGRES_SYNCHRONIZER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SYNCHRONIZER_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS_DOCKER}
      SERVER_PORT: ${STATIFY_SYNCHRONIZER_PORT}
    depends_on:
      postgres-synchronizer:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:$${STATIFY_SYNCHRONIZER_PORT}/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_core_data:
  postgres_synchronizer_data: